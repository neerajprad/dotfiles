# -*- fill-column: 80; eval: (auto-fill-mode 1); -*-
#+TITLE: Emacs Configuration
#+AUTHOR: Neeraj Pradhan
#+PROPERTY: header-args    :results silent

Modified from Harry Schwartz's excellent org-based [[https://github.com/hrs/dotfiles/edit/master/emacs/.emacs.d/configuration.org][config]].

* Configure =use-package=

Use [[https://github.com/jwiegley/use-package][use-package]] to install and configure packages for lazy loading.
=use-package= will install the package if it's not already available.

#+begin_src emacs-lisp
  ;(package-refresh-contents)
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
  ; Show packages taking longer than 0.1 s to load.
  (setq use-package-verbose t)
  (setq use-package-compute-statistics t)
#+end_src

Always compile packages, and use the newest version available.

#+begin_src emacs-lisp
  (use-package auto-compile
    :config
    (auto-compile-on-load-mode)
    (setq load-prefer-newer t))
#+end_src

* Utility functions
While most env variables are loaded correctly using =osx-env-sync=, we may need
to modify the =PATH= variable.
#+begin_src emacs-lisp
(defun np/append-to-path (path)
  "Add a path both to the $PATH variable and to Emacs' exec-path."
  (setenv "PATH" (concat (getenv "PATH") ":" path))
  (add-to-list 'exec-path path))
#+end_src

* Change emacs defaults

On OSX, follow the instructions in [[https://github.com/ersiner/osx-env-sync/][osx-env-sync]] to ensure that environment
variables are synced from =.bash_profile= when emacs is launched as a GUI
application.

Use [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] for some basic settings.

#+begin_src emacs-lisp
  (load-file "~/dotfiles/.emacs.d/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
#+end_src

Use [[https://www.emacswiki.org/emacs/BackupEachSave][Backup Each Save]] to change backup location to =~/.backups= and save each
file.

#+begin_src emacs-lisp
  (use-package backup-each-save
    :hook after-save-hook backup-each-save
    :init
    (defun backup-each-save-filter (filename)
      (let ((ignored-filenames
             '("^/tmp" "semantic.cache$" "\\.emacs-places$"
               "\\.recentf$" ".newsrc\\(\\.eld\\)?"))
            (matched-ignored-filename nil))
        (mapc
         (lambda (x)
           (when (string-match x filename)
             (setq matched-ignored-filename t)))
         ignored-filenames)
        (not matched-ignored-filename)))
    (setq backup-each-save-filter-function 'backup-each-save-filter))
#+end_src

* UI preferences
** Tweak window chrome

Remove the menu which takes up useful space.

#+begin_src emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
#+end_src

** Use fancy lambdas

#+begin_src emacs-lisp
  (global-prettify-symbols-mode t)
#+end_src

** Load up a theme

Use "solarized-dark" theme.

#+begin_src emacs-lisp
  (use-package solarized-theme
    :config
    (setq solarized-use-variable-pitch nil
          solarized-height-plus-1 1.0
          solarized-height-plus-2 1.0
          solarized-height-plus-3 1.0
          solarized-height-plus-4 1.0
          solarized-distinct-fringe-background t)
    (let ((line (face-attribute 'mode-line :underline)))
      (set-face-attribute 'mode-line          nil :overline   line)
      (set-face-attribute 'mode-line-inactive nil :overline   line)
      (set-face-attribute 'mode-line-inactive nil :underline  line)
      (set-face-attribute 'mode-line          nil :box        nil)
      (set-face-attribute 'mode-line-inactive nil :box        nil)
      (set-face-attribute 'mode-line-inactive nil :background "#f9f2d9")))

  (defun np/transparency (value)
    "Sets the transparency of the frame window. 0=transparent/100=opaque."
    (interactive "nTransparency Value 0 - 100 opaque:")
    (set-frame-parameter (selected-frame) 'alpha value))

  (defun np/apply-theme ()
    "Apply the `solarized-dark' theme and make frames just slightly \
transparent."
    (interactive)
    (load-theme 'solarized-dark t)
    (np/transparency 90))
#+end_src

If this code is being evaluated by =emacs --daemon=, ensure that each subsequent
frame is themed appropriately.

#+begin_src emacs-lisp
  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (with-selected-frame frame (apply-theme))))
    (np/apply-theme))
#+end_src

** Use =moody= for a beautiful modeline

Ribbon-based modeline (only for GUI mode).

#+begin_src emacs-lisp
  (use-package moody
    :if window-system
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode))
#+end_src

** Scroll conservatively

Avoid recentering the cursor.

#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src

** Highlight the current line

=global-hl-line-mode= softly highlights the background color of the line
containing point.

** Display column
#+begin_src emacs-lisp
  (setq column-number-mode t)
#+end_src

* Editor Settings
** Keybindings
Allow to quickly open =config.org=
#+begin_src emacs-lisp
  (defun np/visit-emacs-config ()
    (interactive)
    (find-file "~/dotfiles/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'np/visit-emacs-config)
#+end_src

** Always indent with spaces

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

** Set tab width to 2
#+begin_src emacs-lisp
  (setq-default tab-width 2)
#+end_src

** Set up =helpful=

The =helpful= package provides, among other things, more context in Help buffers.

#+begin_src emacs-lisp
  (use-package helpful)
  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
#+end_src

** Highlight current line

#+begin_src emacs-lisp
  (global-hl-line-mode)
#+end_src

* Project Management

** Load =custom.el=

Do not add customization at the end of `init.el`

#+begin_src emacs-lisp
  (setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

** =undo-tree=

tree-based undo management.

#+begin_src emacs-lisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode))
#+end_src
** Ivy and Counsel

#+begin_src emacs-lisp
  (use-package counsel
    :bind
    ("M-x" . 'counsel-M-x)
    ("C-s" . 'swiper)

    :config
    (use-package flx
      :ensure t)
    (use-package smex
      :ensure t)

    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-re-builders-alist
          '((swiper . ivy--regex-plus)
            (t . ivy--regex-fuzzy))))
#+end_src

** Use =dumb-jump=
Jump to definition

#+begin_src emacs-lisp
  (use-package dumb-jump
    :config
    (setq dumb-jump-selector 'ivy))
#+end_src

** Use =company-mode=

#+begin_src emacs-lisp
  (use-package company)
  (add-hook 'after-init-hook 'global-company-mode)
  (global-set-key (kbd "M-/") 'company-complete-common)
#+end_src

** Use =flycheck=

#+begin_src emacs-lisp
  (use-package let-alist)
  (use-package flycheck)
#+end_src

** TODO Configure =Hydra=
** TODO Configure =deadgrep=

* Programming Environments
** Python
Use =elpy= and =flycheck= for syntax checking.
#+begin_src emacs-lisp
  (use-package elpy
    :defer t
    :init
    (advice-add 'python-mode :before 'elpy-enable)
    :config
    (setq elpy-rpc-virtualenv-path 'current)
    :hook
    (flycheck-mode))
#+end_src

Configure Jedi with company mode
#+begin_src emacs-lisp
  (use-package jedi)
  ;; (add-to-list 'company-backends 'company-jedi)
  (add-hook 'python-mode-hook 'jedi:setup)
  (setq jedi:complete-on-dot t)
#+end_src
* Org-mode Settings

** Display

Use pretty bullets

#+begin_src emacs-lisp
  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+end_src

Downward arrow instead of ellipsis
#+begin_src emacs-lisp
  (setq org-ellipsis "â¤µ")
#+end_src

Soft wrap

#+begin_src emacs-lisp
  (setq org-indent-mode t)
#+end_src

Indent text below headlines

#+begin_src emacs-lisp
  (setq org-startup-indented t)
#+end_src

** Code blocks
Enable syntax highlighting
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src

Make TAB act as if it were issued in a buffer of the language's major mode.

#+begin_src emacs-lisp
  (setq org-src-tab-acts-natively t)
#+end_src

Allow commenting in the language's major mode.

#+begin_src emacs-lisp
  ;; allow comment region in the code edit buffer (according to language)
  (defun np/my-org-comment-dwim (&optional arg)
    (interactive "P")
    (or (org-babel-do-key-sequence-in-edit-buffer (kbd "M-;"))
        (comment-dwim arg)))

  ;; make `C-c C-v C-x M-;' more convenient
  (define-key org-mode-map
    (kbd "M-;") 'np/my-org-comment-dwim)
#+end_src

** Keybindings

Add to templates
#+begin_src emacs-lisp
  (setq templs '(("el" "#+begin_src emacs-lisp\n\n#+end_src" "")
                 ("s" "#+begin_src ?\n\n#+end_src" "")))
  (setq org-structure-template-alist
        (nconc templs org-structure-template-alist))

  (global-set-key  (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c i")
                  (lambda () (interactive) (find-file "~/Dropbox/org/gtd/gtd.org")))
#+end_src

** Set directory
#+begin_src emacs-lisp
  (setq org-directory "~/Dropbox/org")
#+end_src

** Agenda
#+begin_src emacs-lisp
    (setq org-todo-keywords
          '((sequence "TODO(t)" "WAIT(w)" "NEXT(n)"  "|"
                      "DONE(d!)" "CANCELLED(c@)" "INACTIVE(i@)")))
    (setq org-agenda-files (list "~/Dropbox/org/gtd/inbox.org"
                                 "~/Dropbox/org/gtd/gtd.org"
                                 "~/Dropbox/org/gtd/ideas.org"
                                 "~/Dropbox/org/gtd/ideas.org"))
    (setq org-log-into-drawer t)

    (setq org-agenda-span 14
          org-agenda-start-on-weekday nil
          org-agenda-start-day "-3d")
#+end_src

** Journal
Use =org-journal= package for daily journaling and integrate with agenda.
#+begin_src emacs-lisp
  (use-package org-journal
    :defer t
    :custom
    (org-journal-dir "~/Dropbox/org/journal")
    (org-extend-today-until 4)
    (org-journal-enable-agenda-integration t)
    (org-journal-date-format "%A, %d %B %Y")
    (org-journal-file-type 'weekly)
    :config
    (setq org-journal-file-format
          (format "%s_%s/%s" "%Y" org-journal-file-type "%m-%d.org")))
#+end_src

** Habit tracking

#+begin_src emacs-lisp
  (add-to-list 'org-modules 'org-habit t)
  (setq org-habit-show-habits-only-for-today nil)
#+end_src

** Exporting
*latex*
Use ox-latex. Use minted for syntax highlighting in code blocks.

#+begin_src emacs-lisp
(require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "minted" nil))
(setq org-preview-latex-default-process 'imagemagick)
(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
    "bibtex %b"
    "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
    "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.0))
; update paths for latex and imagemagick
(np/append-to-path "/Library/TeX/texbin/")
(np/append-to-path "/usr/local/bin")
#+end_src
